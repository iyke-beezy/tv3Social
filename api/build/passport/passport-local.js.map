{"version":3,"sources":["../../src/passport/passport-local.js"],"names":["DEBUG","authFields","usernameField","passwordField","passReqToCallback","passport","use","Strategy","req","username","password","cb","Admin","checkExistingField","admin","message","comparePassword","checkPassword","lastLogin","Date","now","markModified","save","statusCode","body","email","checkEmail","checkUsername","newAdmin","fullName"],"mappings":"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","sourcesContent":["import debug from 'debug';\r\nimport { Strategy } from 'passport-local';\r\nimport passport from 'passport';\r\n\r\nimport Admin from '../models/admin.model'\r\nimport User from '../models/user.model'\r\n\r\nconst DEBUG = debug('dev')\r\n\r\nconst authFields = {\r\n    usernameField: 'username',\r\n    passwordField: 'password',\r\n    passReqToCallback: true\r\n}\r\n\r\npassport.use(\r\n    'login',\r\n    new Strategy(authFields, async (req, username, password, cb) => {\r\n        try {\r\n            const admin = await Admin.checkExistingField('username', username)\r\n            if (!admin || !admin.password) {\r\n                return cb(null, false, { message: 'Email is not registered.' });\r\n            }\r\n\r\n            const checkPassword = await admin.comparePassword(password);\r\n\r\n            if (!checkPassword) {\r\n                return cb(null, false, { message: 'Incorrect password.' });\r\n            }\r\n            admin.lastLogin = Date.now()\r\n            admin.markModified('lastLogin')\r\n            await admin.save();\r\n            return cb(null, admin, { message: 'Logged In Successfully' });\r\n        } catch (err) {\r\n            DEBUG(err);\r\n            return cb(null, false, { statusCode: 400, message: err.message });\r\n        }\r\n    }),\r\n)\r\n\r\n\r\npassport.use(\r\n    'signup',\r\n    new Strategy(authFields, async (req, username, password, cb) => {\r\n        try {\r\n            const checkEmail = await Admin.checkExistingField('email', req.body.email);\r\n\r\n            if (checkEmail) {\r\n                return cb(null, false, {\r\n                    statusCode: 409,\r\n                    message: 'Email already registered, log in instead',\r\n                });\r\n            }\r\n\r\n            const checkUsername = await Admin.checkExistingField('username', req.body.username);\r\n            if (checkUsername) {\r\n                return cb(null, false, {\r\n                    statusCode: 409,\r\n                    message: 'Username exists, please try another',\r\n                });\r\n            }\r\n\r\n\r\n            const newAdmin = new Admin();\r\n            newAdmin.fullName = req.body.fullName;\r\n            newAdmin.username = req.body.username;\r\n            newAdmin.password = req.body.password;\r\n\r\n            await newAdmin.save();\r\n            return cb(null, newAdmin, { statusCode: 200, message: 'success' });\r\n        } catch (err) {\r\n            DEBUG(err)\r\n            return cb(null, false, { statusCode: 400, message: err.message });\r\n        }\r\n    }),\r\n);\r\n\r\n"],"file":"passport-local.js"}