{"version":3,"sources":["../../src/models/admin.model.js"],"names":["jwtPrivateSecret","process","env","JWT_PRIVATE_SECRET","replace","adminSchema","mongoose","Schema","fullName","type","String","required","username","password","timestamp","Date","now","lastLogin","pre","next","isModified","bcrypt","hash","parseInt","HASH","methods","comparePassword","compare","toJSON","user","userObj","toObject","generateVerificationToken","jwt","sign","id","_id","expiresIn","algorithm","statics","checkExistingField","field","value","Org","findOne","checkField","Admin","model"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose'\r\nimport bcrypt from 'bcrypt'\r\nimport { config } from 'dotenv'\r\nimport jwt from 'jsonwebtoken'\r\n\r\n\r\nconfig()\r\nconst jwtPrivateSecret = process.env.JWT_PRIVATE_SECRET.replace(/\\\\n/g, \"\\n\");\r\n//build the admin schema\r\nconst adminSchema = mongoose.Schema({\r\n    fullName: {\r\n        type: String,\r\n        required: [true, 'fullName is required']\r\n    },\r\n\r\n    username: {\r\n        type: String,\r\n        required: [true, 'username is required']\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n        required: [true, 'password is required']\r\n    },\r\n    timestamp: {\r\n        type: Date,\r\n        default: Date.now\r\n    },\r\n    lastLogin: Date\r\n})\r\n\r\nadminSchema.pre(\"save\", async function (next) {\r\n    if (!this.password || !this.isModified(\"password\")) return next;\r\n\r\n    this.password = await bcrypt.hash(\r\n        this.password,\r\n        parseInt(process.env.HASH)\r\n    );\r\n    next();\r\n})\r\n\r\n//compare passwords for login\r\nadminSchema.methods.comparePassword = async function (password) {\r\n    return await bcrypt.compare(password, this.password);\r\n};\r\n\r\n//remove password from user object when requested \r\nadminSchema.methods.toJSON = function () {\r\n    const user = this;\r\n\r\n    const userObj = user.toObject();\r\n    delete userObj.password;\r\n    return userObj;\r\n};\r\n\r\n//generate private jwt codes for authorization which expires in 10days\r\nadminSchema.methods.generateVerificationToken = function () {\r\n    return jwt.sign({ id: this._id }, jwtPrivateSecret, {\r\n        expiresIn: \"10d\",\r\n        algorithm: \"RS256\",\r\n    });\r\n};\r\n\r\nadminSchema.statics.checkExistingField = async (field, value) => {\r\n    const checkField = await Org.findOne({ [`${field}`]: value });\r\n\r\n    return checkField;\r\n};\r\n\r\nconst Admin = mongoose.model('Admin', adminSchema)\r\n\r\nexport default Admin"],"file":"admin.model.js"}